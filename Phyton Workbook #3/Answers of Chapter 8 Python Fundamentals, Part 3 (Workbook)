{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyPkbCaiSvxM9LmJGkC1fDzI"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":1,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"SKN9bu0xjw4X","executionInfo":{"status":"ok","timestamp":1714137738782,"user_tz":-420,"elapsed":23,"user":{"displayName":"Cezar Ryan","userId":"07693813200829864748"}},"outputId":"0fbbefb3-d282-4c69-cdf6-86e6fa36c752"},"outputs":[{"output_type":"stream","name":"stdout","text":["[4, 6, 9]\n"]}],"source":["#EXERCISE 1:\n","\n","#Create an empty list then add the following numbers using append: 4, 6 9.\n","\n","numbers = []\n","numbers.append(4)\n","numbers.append(6)\n","numbers.append(9)\n","\n","print(numbers)"]},{"cell_type":"code","source":["# EXERCISE 2:\n","# Using the range function, create a list containing the numbers from 0 to 10.\n","\n","numbers = list(range(11))\n","\n","print(numbers)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"0K9y0X0vkpZJ","executionInfo":{"status":"ok","timestamp":1714137852193,"user_tz":-420,"elapsed":46,"user":{"displayName":"Cezar Ryan","userId":"07693813200829864748"}},"outputId":"e8eb2cdf-742d-46f5-c5c0-be11c256cc6d"},"execution_count":2,"outputs":[{"output_type":"stream","name":"stdout","text":["[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n"]}]},{"cell_type":"code","source":["# EXERCISE 3:\n","\n","# Create a list containing the valid grade values, then using enumerate in a for loop, print out all indices and items in the list.\n","\n","# It should print out:\n","\n","# 0   1.0\n","# 1   1.25\n","# 2   1.5\n","# 3   1.75\n","# 4   2.0\n","# 5   2.25\n","# 6   2.5\n","# 7   3.0\n","\n","grades = [1.0, 1.25, 1.5, 1.75, 2.0, 2.25, 2.5, 3.0]\n","\n","for index, value in enumerate(grades):\n","    print(index, value)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"9ihY-KEHlNJq","executionInfo":{"status":"ok","timestamp":1714137947607,"user_tz":-420,"elapsed":391,"user":{"displayName":"Cezar Ryan","userId":"07693813200829864748"}},"outputId":"819dd878-1117-427a-e995-9033b1ed0447"},"execution_count":3,"outputs":[{"output_type":"stream","name":"stdout","text":["0 1.0\n","1 1.25\n","2 1.5\n","3 1.75\n","4 2.0\n","5 2.25\n","6 2.5\n","7 3.0\n"]}]},{"cell_type":"code","source":["# EXERCISE 4:\n","\n","# Using Index Slicing, print out the list of grades higher than 2.0\n","\n","grades = [1.0, 1.25, 1.5, 1.75, 2.0, 2.25, 2.5, 3.0]\n","\n","grade2= grades[grades.index(2.25):]\n","\n","print(grade2)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"JoBe0u8rldcP","executionInfo":{"status":"ok","timestamp":1714138040494,"user_tz":-420,"elapsed":14,"user":{"displayName":"Cezar Ryan","userId":"07693813200829864748"}},"outputId":"951dddef-9799-4de4-9ba6-f8c212c4276b"},"execution_count":4,"outputs":[{"output_type":"stream","name":"stdout","text":["[2.25, 2.5, 3.0]\n"]}]},{"cell_type":"code","source":["# EXERCISE 5:\n","\n","# Using Index Slicing, print out the list of grades better than 2.0.\n","\n","grades = [1.0, 1.25, 1.5, 1.75, 2.0, 2.25, 2.5, 3.0]\n","\n","grade2 = [grade for grade in grades if grade < 2.0]\n","\n","print(grade2)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"_5a5R6Qnlxl7","executionInfo":{"status":"ok","timestamp":1714138335111,"user_tz":-420,"elapsed":17,"user":{"displayName":"Cezar Ryan","userId":"07693813200829864748"}},"outputId":"f3a6b25b-7090-42b2-8574-eb22282d7833"},"execution_count":6,"outputs":[{"output_type":"stream","name":"stdout","text":["Grades better than 2.0: [1.0, 1.25, 1.5, 1.75]\n"]}]},{"cell_type":"code","source":["# EXERCISE 6:\n","\n","# Using Index Slicing, print out the grades 2.0,2.25,2.5.\n","\n","grades = [1.0, 1.25, 1.5, 1.75, 2.0, 2.25, 2.5, 3.0]\n","\n","index1= grades.index(2.0)\n","index2= grades.index(2.25)\n","index3 = grades.index(2.5)\n","\n","grade2 = grades[index1:index3 + 1]\n","\n","print(grade2)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"TH_femsbm-GC","executionInfo":{"status":"ok","timestamp":1714138533046,"user_tz":-420,"elapsed":23,"user":{"displayName":"Cezar Ryan","userId":"07693813200829864748"}},"outputId":"944758de-2a57-45d1-fbf8-731b6eab979f"},"execution_count":7,"outputs":[{"output_type":"stream","name":"stdout","text":["[2.0, 2.25, 2.5]\n"]}]},{"cell_type":"code","source":["# CHALLENGE:\n","\n","# Modify the code in the subheading Parsing Lines to display all the time stamps of the emails in mboxt-short.txt\n","\n","fhand = open('mboxt-short.txt')\n","my_list = []\n","for line in fhand:\n","    line = line.rstrip()\n","    if not line.startswith('From'):\n","        continue\n","    words = line.split()\n","    if len(words) > 2:\n","        if my_list == []:\n","            my_list.append(words[5])\n","        elif words[5] not in my_list:\n","             my_list.append(words[5])\n","print(my_list)"],"metadata":{"id":"yNnwWY2EoZtG"},"execution_count":null,"outputs":[]}]}